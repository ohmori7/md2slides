#!/usr/bin/env ruby
# coding: utf-8

# Copyright (c) 2025 Motoyuki OHMORI All rights reserved.

require 'optparse'
require 'md2slides'

options = {}
$opts = OptionParser.new do |opts|
	progname = File.basename(__FILE__)
	opts.banner = <<~EOF
		Usage:
			#{progname} list <MD> [<URL or ID>]
			#{progname} update <MD> [<URL or ID>]
			#{progname} fetch <MD> [<URL or ID>]
			#{progname} audio <MD> [<URL or ID>]
			#{progname} video <MD> [<URL or ID>]
			#{progname} deploy <MD> [<URL or ID>]
			#{progname} -h
	EOF
	opts.on('-h', '--help', 'show usage') { options[:h] = true }
	opts.parse!
end

def usage(errmsg = nil)
	puts "ERROR: #{errmsg}" if errmsg
	puts <<~EOF
#{$opts.banner}
Description:
	generate a Google presentation file.

Argument:
	-h:		output this message.
	<MD>:		a file written in markdown
	<URL or id>:	a URL or a ID of a Google presentation

BUGS:
	only .md is allowed for an input file for now.

	EOF
	exit 1
end

usage if options[:h]
usage if ARGV.size < 2
cmd = ARGV.shift
path = ARGV.shift
filename = File.basename(path)
if filename =~ /^(.*)\.(md)$/i
	name, ext = $1, $2
else
	usage("cannot find the file name extention: #{filename}")
end

md = MD.new(path)
url = md.attributes[:url]
if url.nil?
	url = ARGV.shift
	usage("No URL and ID specified in the presentation and the argument") if url.nil?
	usage("extra arguments: #{ARGV.join(", ")}") if ! ARGV.nil
else
	usage("URL or ID duplicatedly specified!!") if ARGV.size != 0
end

presentation = Presentation.new(url)
case cmd
when 'list'
	presentation.list
when 'update'
	presentation.update(md)
	#presentation.stick_out_check
when 'fetch'
	presentation.download
when 'audio'
	presentation.generate_audio
when 'video'
	presentation.generate_video
when 'deploy'
	presentation.update(md)
	presentation.download
	presentation.generate_audio
	presentation.generate_video
else
	usage("unknown command: #{cmd}")
end
